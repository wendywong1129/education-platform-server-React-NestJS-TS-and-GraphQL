# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserType {
  id: String!

  """nickname"""
  name: String!

  """description"""
  desc: String!

  """tel"""
  tel: String!

  """avatar"""
  avatar: String
}

type Page {
  total: Int!
  pageNum: Int!
  pageSize: Int!
}

type Result {
  code: Int!
  message: String
  data: String
}

type OSSType {
  """expiration"""
  expire: String!

  """policy"""
  policy: String!

  """signature"""
  signature: String!

  """key"""
  accessId: String!

  """host"""
  host: String!

  """dir"""
  dir: String!
}

type StudentType {
  id: String!
  createdAt: DateTime!
  createdBy: String
  updatedAt: DateTime
  updatedBy: String
  deletedAt: DateTime
  deletedBy: String

  """nickname"""
  name: String!

  """mobile"""
  tel: String!

  """avatar"""
  avatar: String

  """account"""
  account: String

  """openid"""
  openid: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type StudentResult {
  code: Int!
  message: String!
  data: StudentType
}

type StudentResults {
  code: Int!
  message: String!
  data: [StudentType!]
  page: Page
}

type OrgImageType {
  id: String
  url: String!
  remark: String
}

type OrderTimeType {
  """start time"""
  startTime: String!

  """end time"""
  endTime: String!

  """key"""
  key: Float!
}

type ReducibleTimeType {
  """weekday"""
  week: String!

  """available time json"""
  orderTime: [OrderTimeType!]!
}

type TeacherType {
  id: String!
  createdAt: DateTime!
  createdBy: String
  updatedAt: DateTime
  updatedBy: String
  deletedAt: DateTime
  deletedBy: String

  """name"""
  name: String!

  """photo"""
  photoUrl: String

  """teaching time"""
  teacherTime: Float

  """tags"""
  tags: String

  """education"""
  education: String

  """seniority"""
  seniority: String

  """experience"""
  experience: String

  """prize"""
  carryPrize: String
}

type CourseType {
  id: String!
  createdAt: DateTime!
  createdBy: String
  updatedAt: DateTime
  updatedBy: String
  deletedAt: DateTime
  deletedBy: String

  """course name"""
  name: String!

  """course description"""
  desc: String

  """age group"""
  group: String!

  """cover image"""
  coverUrl: String

  """base ability"""
  baseAbility: String!

  """limit number"""
  limitNumber: Float!

  """duration"""
  duration: Float!

  """reservation info"""
  reserveInfo: String

  """refund info"""
  refundInfo: String

  """other info"""
  otherInfo: String

  """available time"""
  reducibleTime: [ReducibleTimeType!]

  """teachers"""
  teachers: [TeacherType!]
}

type OrganizationType {
  id: String!
  createdAt: DateTime!
  createdBy: String
  updatedAt: DateTime
  updatedBy: String
  deletedAt: DateTime
  deletedBy: String

  """business license"""
  businessLicense: String!

  """front image of identity"""
  identityCardFrontImg: String!

  """back image of identity"""
  identityCardBackImg: String!

  """tags"""
  tags: String

  """organization description"""
  description: String

  """organization name"""
  name: String

  """logo"""
  logo: String

  """longitude"""
  longitude: String

  """latitude"""
  latitude: String

  """address"""
  address: String

  """tel"""
  tel: String

  """front image of organization"""
  orgFrontImg: [OrgImageType!]

  """indoor image of organization"""
  orgRoomImg: [OrgImageType!]

  """front image of organization"""
  orgOtherImg: [OrgImageType!]

  """organization's courses"""
  courses: [CourseType!]
}

type OrganizationResult {
  code: Int!
  message: String!
  data: OrganizationType
}

type OrganizationResults {
  code: Int!
  message: String!
  data: [OrganizationType!]
  page: Page
}

type CourseResult {
  code: Int!
  message: String!
  data: CourseType
}

type CourseResults {
  code: Int!
  message: String!
  data: [CourseType!]
  page: Page
}

type CardType {
  """id"""
  id: String!

  """card name"""
  name: String!

  """
  card type 
       TIMES = "times",
      DURATION = "duration"
  """
  type: String!

  """course times"""
  time: Float!

  """validityDay(day)"""
  validityDay: Float!

  """course"""
  course: CourseType!
}

type CardResult {
  code: Int!
  message: String!
  data: CardType
}

type CardResults {
  code: Int!
  message: String!
  data: [CardType!]
  page: Page
}

type ProductType {
  id: String!
  createdAt: DateTime!
  createdBy: String
  updatedAt: DateTime
  updatedBy: String
  deletedAt: DateTime
  deletedBy: String

  """product name"""
  name: String!

  """product description"""
  desc: String

  """product status"""
  status: String!

  """product type"""
  type: String

  """distance"""
  distance: String!

  """stock"""
  stock: Float!

  """current stock"""
  curStock: Float!

  """buy number"""
  buyNumber: Float!

  """limit buy number"""
  limitBuyNumber: Float!

  """cover image"""
  coverUrl: String!

  """banner"""
  bannerUrl: String!

  """original price"""
  originalPrice: Float!

  """sale price"""
  preferentialPrice: Float!

  """organization"""
  org: OrganizationType!

  """consumer cards"""
  cards: [CardType!]
}

type ProductTypeType {
  """key"""
  key: String!

  """title"""
  title: String!
}

type ProductResult {
  code: Int!
  message: String!
  data: ProductType
}

type ProductResults {
  code: Int!
  message: String!
  data: [ProductType!]
  page: Page
}

type ProductTypesResults {
  code: Int!
  message: String!
  data: [ProductTypeType!]
  page: Page
}

type TeacherResult {
  code: Int!
  message: String!
  data: TeacherType
}

type TeacherResults {
  code: Int!
  message: String!
  data: [TeacherType!]
  page: Page
}

type WxConfig {
  """appId"""
  appId: String!

  """timeStamp"""
  timeStamp: String!

  """random string"""
  nonceStr: String!

  """package"""
  package: String!

  """sign type"""
  signType: String!

  """pay sign"""
  paySign: String!
}

type WxConfigResult {
  code: Int!
  message: String!
  data: WxConfig
}

type WxorderType {
  id: String!
  createdAt: DateTime!
  createdBy: String
  updatedAt: DateTime
  updatedBy: String
  deletedAt: DateTime
  deletedBy: String

  """appid"""
  appid: String!

  """mchid"""
  mchid: String!

  """openid"""
  openid: String

  """trade type"""
  trade_type: String

  """trade state"""
  trade_state: String

  """bank type"""
  bank_type: String

  """transaction id"""
  transaction_id: String

  """out trade number"""
  out_trade_no: String

  """attach data"""
  attach: String

  """trade state description"""
  trade_state_desc: String

  """payment success time"""
  success_time: String

  """total amount"""
  total: Float

  """payer total amount"""
  payer_total: Float

  """currency"""
  currency: String

  """payer currency"""
  payer_currency: String

  """门店"""
  org: OrganizationType
}

type OrderType {
  id: String

  """createdAt"""
  createdAt: DateTime
  createdBy: String
  updatedAt: DateTime
  updatedBy: String
  deletedAt: DateTime
  deletedBy: String

  """quantity"""
  quantity: Float!

  """amount"""
  amount: Float!

  """mobile number"""
  tel: String!

  """status"""
  status: String!

  """out trade number"""
  outTradeNo: String

  """student"""
  student: StudentType

  """organization"""
  org: OrganizationType

  """product"""
  product: ProductType

  """wxOrder"""
  wxOrder: WxorderType
}

type OrderResult {
  code: Int!
  message: String!
  data: OrderType
}

type OrderResults {
  code: Int!
  message: String!
  data: [OrderType!]
  page: Page
}

type WxorderResult {
  code: Int!
  message: String!
  data: WxorderType
}

type WxorderResults {
  code: Int!
  message: String!
  data: [WxorderType!]
  page: Page
}

type CardRecordType {
  """id"""
  id: String!

  """start time"""
  startTime: DateTime

  """end time"""
  endTime: DateTime

  """buy time"""
  buyTime: DateTime

  """residue time"""
  residueTime: Float

  """status"""
  status: String

  """associated card"""
  card: CardType

  """course"""
  course: CourseType

  """student"""
  student: StudentType

  """organization"""
  org: OrganizationType
}

type CardRecordResult {
  code: Int!
  message: String!
  data: CardRecordType
}

type CardRecordResults {
  code: Int!
  message: String!
  data: [CardRecordType!]
  page: Page
}

type ScheduleRecordType {
  """id"""
  id: String!

  """status"""
  status: String

  """subscribe time"""
  subscribeTime: DateTime

  """student"""
  student: StudentType

  """schedule"""
  schedule: ScheduleType

  """organization"""
  org: OrganizationType

  """course"""
  course: CourseType
}

type ScheduleType {
  """id"""
  id: String!
  createdAt: DateTime!
  createdBy: String
  updatedAt: DateTime
  updatedBy: String
  deletedAt: DateTime
  deletedBy: String

  """class date"""
  schoolDay: DateTime

  """start time"""
  startTime: String

  """end time"""
  endTime: String

  """limit number"""
  limitNumber: Float

  """course info"""
  course: CourseType

  """organization info"""
  org: OrganizationType

  """teacher"""
  teacher: TeacherType

  """reservation history"""
  scheduleRecords: [ScheduleRecordType!]
}

type ScheduleResult {
  code: Int!
  message: String!
  data: ScheduleType
}

type ScheduleResults {
  code: Int!
  message: String!
  data: [ScheduleType!]
  page: Page
}

type ScheduleRecordResult {
  code: Int!
  message: String!
  data: ScheduleRecordType
}

type ScheduleRecordResults {
  code: Int!
  message: String!
  data: [ScheduleRecordType!]
  page: Page
}

type Query {
  """find a user by id"""
  findById(id: String!): UserType!

  """get user info by user id"""
  getUserInfo: UserType!

  """get oss info"""
  getOSSInfo: OSSType!
  getStudentInfo: StudentResult!
  getStudents(page: PageInput!): StudentResults!
  getOrganizationInfo(id: String!): OrganizationResult!
  getOrganizations(page: PageInput!, name: String): OrganizationResults!
  getCourseInfo(id: String!): CourseResult!
  getCourses(page: PageInput!, name: String): CourseResults!
  getCardInfo(id: String!): CardResult!
  getCards(courseId: String!, name: String): CardResults!
  getProductTypes: ProductTypesResults!
  getProductInfo(id: String!): ProductResult!
  getProducts(page: PageInput!, name: String): ProductResults!
  getProductsForH5(page: PageInput!, type: String, name: String): ProductResults!
  getProductsByOrgIdForH5(orgId: String!): ProductResults!
  getTeacherInfo(id: String!): TeacherResult!
  getTeachers(page: PageInput!, name: String): TeacherResults!
  getOrderInfo(id: String!): OrderResult!
  getOrders(page: PageInput!): OrderResults!
  getWxorderInfo(id: String!): WxorderResult!
  getWxorders(page: PageInput!): WxorderResults!
  getCardRecordInfo(id: String!): CardRecordResult!

  """get individual card record info"""
  getCardRecordsForH5(page: PageInput!): CardRecordResults!
  getCardRecords(page: PageInput!): CardRecordResults!

  """get card records of a student for a course"""
  getUseCardRecordsByCourse(courseId: String!): CardRecordResults!
  getScheduleInfo(id: String!): ScheduleResult!
  getSchedules(today: String!): ScheduleResults!

  """get courses the current student can subscribe"""
  getCanSubscribeCourses: OrganizationResults!

  """get valid schedules for next 7 days by courseId"""
  getSchedulesByCourse(courseId: String!): ScheduleResults!
  getScheduleRecordInfo(id: String!): ScheduleRecordResult!

  """get schedule records of a student"""
  getScheduleRecords(page: PageInput!): ScheduleRecordResults!
}

input PageInput {
  pageNum: Float!
  pageSize: Float!
}

type Mutation {
  """create a new user"""
  createUser(params: UserInput!): Boolean!

  """update a user by id"""
  updateById(id: String!, params: UserInput!): Boolean!

  """update user info by user id"""
  updateUserInfo(id: String!, params: UserInput!): Result!

  """delete a user by id"""
  deleteById(id: String!): Boolean!

  """Send sms verification"""
  sendCodeMsg(tel: String!): Result!

  """Login"""
  login(tel: String!, code: String!): Result!

  """Student Login"""
  studentLogin(account: String!, password: String!): Result!

  """Student Register"""
  studentRegister(account: String!, password: String!): Result!
  commitStudentInfo(params: StudentInput!): StudentResult!
  commitOrganization(params: OrganizationInput!, id: String): OrganizationResult!
  deleteOrganization(id: String!): Result!
  commitCourseInfo(params: PartialCourseInput!, id: String): CourseResult!
  deleteCourse(id: String!): Result!
  commitCardInfo(params: CardInput!, courseId: String!, id: String): CardResult!
  deleteCard(id: String!): Result!
  commitProductInfo(params: PartialProductInput!, id: String): ProductResult!
  deleteProduct(id: String!): Result!
  commitTeacherInfo(params: TeacherInput!, id: String): TeacherResult!
  deleteTeacher(id: String!): Result!
  getWxpayConfig(productId: String!, quantity: Float!, amount: Float!): WxConfigResult!
  mockOrderGenerator(productId: String!, quantity: Float!, amount: Float!): Result!
  deleteOrder(id: String!): Result!
  deleteWxorder(id: String!): Result!
  deleteCardRecord(id: String!): Result!

  """auto create schedule"""
  autoCreateSchedule(startDay: String!, endDay: String!): Result!

  """confirm to subscribe schedule for a course"""
  subscribeCourse(scheduleId: String!, cardId: String!): Result!
  deleteSchedule(id: String!): Result!
  deleteScheduleRecord(id: String!): Result!

  """cancel subscribed course"""
  cancelSubscribeCourse(scheduleRecordId: String!): Result!
}

input UserInput {
  """nickname"""
  name: String!

  """description"""
  desc: String!

  """avatar"""
  avatar: String!
}

input StudentInput {
  """nickname"""
  name: String!

  """mobile"""
  tel: String!

  """avatar"""
  avatar: String!
}

input OrganizationInput {
  """organization name"""
  name: String!

  """logo"""
  logo: String!

  """tel"""
  tel: String

  """tags"""
  tags: String

  """longitude"""
  longitude: String

  """latitude"""
  latitude: String

  """latitude"""
  address: String

  """business license"""
  businessLicense: String!

  """organization description"""
  description: String!

  """front image of identity"""
  identityCardFrontImg: String!

  """back image of identity"""
  identityCardBackImg: String!

  """front image of organization"""
  orgFrontImg: [OrgImageInput!]

  """indoor image of organization"""
  orgRoomImg: [OrgImageInput!]

  """other image of organization"""
  orgOtherImg: [OrgImageInput!]
}

input OrgImageInput {
  id: String
  url: String!
  remark: String
}

input PartialCourseInput {
  """course name"""
  name: String

  """course description"""
  desc: String

  """age group"""
  group: String

  """base ability"""
  baseAbility: String

  """cover image"""
  coverUrl: String

  """student limit of a course"""
  limitNumber: Float

  """duration"""
  duration: Float

  """reservation info"""
  reserveInfo: String

  """refund info"""
  refundInfo: String

  """other info"""
  otherInfo: String

  """available time"""
  reducibleTime: [ReducibleTimeInput!]

  """teachers"""
  teachers: [String!]
}

input ReducibleTimeInput {
  """weekday"""
  week: String!

  """available time json"""
  orderTime: [OrderTimeInput!]!
}

input OrderTimeInput {
  """start time"""
  startTime: String!

  """end time"""
  endTime: String!

  """key"""
  key: Float!
}

input CardInput {
  """card name"""
  name: String!

  """
  card type 
      TIMES = "times",
     DURATION = "duration"
  """
  type: String!

  """course times"""
  time: Float

  """validityDay(day)"""
  validityDay: Float!
}

input PartialProductInput {
  """product name"""
  name: String

  """product description"""
  desc: String

  """product status"""
  status: String

  """product type"""
  type: String

  """stock"""
  stock: Float

  """limit buy number"""
  limitBuyNumber: Float

  """cover image"""
  coverUrl: String

  """banner"""
  bannerUrl: String

  """original price"""
  originalPrice: Float

  """sale price"""
  preferentialPrice: Float

  """consumer cards"""
  cards: [String!]
}

input TeacherInput {
  """name"""
  name: String!

  """photo"""
  photoUrl: String!

  """teaching time"""
  teacherTime: Float

  """tags"""
  tags: String

  """education"""
  education: String

  """seniority"""
  seniority: String

  """experience"""
  experience: String

  """prize"""
  carryPrize: String
}